<?php

/**
 * Permanent SSL Certificate Fix for WAMP/XAMPP
 * This script downloads and configures CA certificates
 */

echo "SSL Certificate Fix for WAMP/XAMPP\n";
echo "==================================\n\n";

// Check if we're in a development environment
$isDevelopment = (
    strpos(__DIR__, 'wamp') !== false ||
    strpos(__DIR__, 'xampp') !== false ||
    strpos($_SERVER['SERVER_NAME'] ?? '', 'localhost') !== false ||
    $_SERVER['HTTP_HOST'] === 'localhost' ||
    $_SERVER['SERVER_NAME'] === '127.0.0.1'
);

if (!$isDevelopment) {
    echo "This script is only for development environments (WAMP/XAMPP).\n";
    echo "Exiting...\n";
    exit;
}

echo "1. Downloading CA Certificate Bundle...\n";

// Download CA certificate bundle
$caBundleUrl = 'https://curl.se/ca/cacert.pem';
$caBundlePath = __DIR__ . '/cacert.pem';

$ch = curl_init();
curl_setopt_array($ch, [
    CURLOPT_URL => $caBundleUrl,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT => 60,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_SSL_VERIFYPEER => false,
    CURLOPT_SSL_VERIFYHOST => false
]);

$caCert = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$error = curl_error($ch);
curl_close($ch);

if ($httpCode === 200 && !empty($caCert) && empty($error)) {
    file_put_contents($caBundlePath, $caCert);
    echo "✓ CA certificate bundle downloaded successfully\n";
    echo "  Saved to: $caBundlePath\n";
} else {
    echo "✗ Failed to download CA bundle. HTTP: $httpCode, Error: $error\n";
    echo "  Continuing with SSL verification disabled...\n";
}

echo "\n2. Testing PayPal SSL Connection...\n";

// Test PayPal connection
$testUrl = 'https://api.paypal.com/v1/oauth2/token';
$ch = curl_init();
curl_setopt_array($ch, [
    CURLOPT_URL => $testUrl,
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_TIMEOUT => 10,
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_SSL_VERIFYPEER => false,
    CURLOPT_SSL_VERIFYHOST => false,
    CURLOPT_HEADER => true,
    CURLOPT_NOBODY => true
]);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$error = curl_error($ch);
curl_close($ch);

if ($httpCode === 401 || $httpCode === 200) { // 401 is expected without credentials
    echo "✓ PayPal SSL connection successful (HTTP: $httpCode)\n";
} else {
    echo "✗ PayPal SSL connection failed. HTTP: $httpCode, Error: $error\n";
}

echo "\n3. Creating SSL Configuration File...\n";

// Create a configuration file
$configContent = <<<PHP
<?php
/**
 * SSL Configuration for Development
 * Auto-generated by fix_ssl_permanently.php
 */

// Disable SSL verification for development environments only
if (strpos(__DIR__, 'wamp') !== false || strpos(__DIR__, 'xampp') !== false || 
    \$_SERVER['SERVER_NAME'] === 'localhost' || \$_SERVER['SERVER_NAME'] === '127.0.0.1') {
    
    // Set default cURL options to disable SSL verification
    \$curlDefaults = [
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_SSL_VERIFYHOST => false,
        CURLOPT_TIMEOUT => 30,
        CURLOPT_CONNECTTIMEOUT => 30
    ];
    
    // Set default stream context
    stream_context_set_default([
        'ssl' => [
            'verify_peer' => false,
            'verify_peer_name' => false,
            'allow_self_signed' => true
        ],
        'http' => [
            'timeout' => 30
        ]
    ]);
}
?>
PHP;

file_put_contents(__DIR__ . '/ssl_config.php', $configContent);
echo "✓ SSL configuration file created: ssl_config.php\n";

echo "\n4. Testing with PayPal SDK...\n";

try {
    require_once 'vendor/autoload.php';
    require_once 'includes/paypal_config.php';
    require_once 'ssl_config.php';

    $credentials = getPayPalCredentials();
    $environment = new \PayPalCheckoutSdk\Core\ProductionEnvironment($credentials['client_id'], $credentials['client_secret']);
    $client = new \PayPalCheckoutSdk\Core\PayPalHttpClient($environment);

    echo "✓ PayPal SDK initialized successfully\n";
} catch (Exception $e) {
    echo "✗ PayPal SDK initialization failed: " . $e->getMessage() . "\n";
}

echo "\n=================================\n";
echo "SSL Fix Complete!\n\n";

echo "What was done:\n";
echo "1. Downloaded CA certificate bundle (if possible)\n";
echo "2. Configured SSL settings for development\n";
echo "3. Created ssl_config.php configuration file\n";
echo "4. Tested PayPal connection\n\n";

echo "Next steps:\n";
echo "1. The SSL fix is now active in your checkout system\n";
echo "2. Test your checkout: php test_ssl_fix.php\n";
echo "3. Or test in browser: http://localhost/ryvahcommerce/test_ssl_fix.php\n\n";

echo "Note: This fix is only for development environments.\n";
echo "For production, you should use proper SSL certificates.\n";
